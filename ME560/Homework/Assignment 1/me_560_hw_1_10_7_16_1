#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct  5 21:28:19 2016

@author: andrewalferman
"""

#Importing Commands
import numpy as np
import matplotlib.pyplot as plt

#Given Information
d = 0.1
m = 1.0
theta = np.radians(45.0)
rho = 10.0

#Time Variables
timescale = 0.001
runtime = 250.0

#The variables below are modified as part of the problem.
v_0 = 25.0
p_1 = 0.01
p_2 = 0.1

#Division is expensive, so this speeds up the process
m_i = 1.0/m

#Initial Conditions
x = 0.0
y = 0.0

#Creating a function to plot a trajectory 
def calctrajectory(theta,x,y,p1,p2,m,rho,d,timescale,runtime,case,v):
    time = 0.0
    
    #Initialize the velocities
    v_x = v * np.cos(theta)
    v_y = v * np.sin(theta)
    y_max = 0.0
    
    #Initialize plotting vectors
    a = []
    b = []
    
    #Find the coefficient of drag
    c_d = (8.0 * p1 * m) / (np.pi * rho * d**3)

    #Computation of the trajectory is accomplished in a single while loop
    while time <= runtime:
        #Append the plotting vectors with the current x and y coordinates
        a.append(x)
        b.append(y)        
        
        #Move the ball based on the velocity of the previous timestep
        x += v_x * timescale
        y += v_y * timescale        
        
        #Calculate the velocity and angle computed in the previous timestep
        v = np.sqrt(v_x**2 + v_y**2)
        theta = np.arctan(v_y/v_x)        
        
        #Find the drag force
        f_d = p1 * v**2        
        
        #Find the force due to gravity
        f_g = p2        
        
        #Find the force in the x and y directions
        f_x = -1 * f_d * np.cos(theta)
        f_y = -1 * (f_g + (f_d * np.sin(theta)))        
        
        #Accelerate the ball using the forces we just calculated
        v_x += f_x * m_i * timescale
        v_y += f_y * m_i * timescale        
        
        #Advance the time one timescale
        time += timescale        
        
        #Determine the maximum height and output stats of the trajectory
        if y >= y_max:
            y_max = y
        elif y <= 0:
            print("Ball {} impacts the ground under the following conditions:".format(case))
            print(" Nondimensional time: {}.".format(time))
            print(" Nondimensional distance: {}.".format(x))
            print(" Nondimensional speed of impact: {}.".format(v))
            print(" Maximum nondimensional height: {}.".format(y_max))
            print(" Coefficient of drag: {}.".format(c_d))
            print("----------")
            return [a,b]
            break
        if time >= runtime:
            print("Ball {} did not impact the ground in this runtime.".format(case))
            break

#Create all of the trajectory data        
case1 = calctrajectory(theta,0.0,0.0,0.001,0.1,m,rho,d,timescale,runtime,"1",1.0)
case2 = calctrajectory(theta,0.0,0.0,0.01,0.1,m,rho,d,timescale,runtime,"2",1.0)
case3 = calctrajectory(theta,0.0,0.0,0.001,1.0,m,rho,d,timescale,runtime,"3",1.0)  
case4 = calctrajectory(theta,0.0,0.0,0.01,1.0,m,rho,d,timescale,runtime,"4",1.0)         

#Plot out the result    
plt.plot(case1[0],case1[1])
plt.plot(case2[0],case2[1])
plt.plot(case3[0],case3[1])
plt.plot(case4[0],case4[1])
plt.xlabel("Nondimensional Distance")
plt.ylabel("Nondimensional Height")
plt.show()
