#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct  5 21:28:19 2016

@author: andrewalferman
"""

#Importing Commands
import numpy as np
import matplotlib.pyplot as plt

#Given Information
d = 0.1
m = 1.0
theta_0 = np.radians(45.0)
g = 9.8
rho = 10.0

#Time Variables
timescale = 0.001
runtime = 200.0

#Mess around with these variables
v_0 = 5.0
p_1 = 10.1
p_2 = 1.0

#Division is expensive, so this speeds up the process
v_0i = 1.0/v_0
m_i = 1.0/m

#Initial Conditions
x = 0.0
y = 0.0
time = 0.0

#Initialize the velocities
v_x = v_0 * np.cos(theta_0)
v_y = v_0 * np.sin(theta_0)
v_star = 1.0
theta = theta_0
y_max = 0.0

#Initialize plotting vectors
a = []
b = []

#Find the coefficient of drag
c_d = (8.0 * p_1 * m) / (np.pi * rho * d**3)

#Computation of the trajectory is accomplished in a single while loop
while time <= runtime:
    #Append the plotting vectors with the current x and y coordinates
    a.append(x)
    b.append(y)

    #Move the ball based on the velocity of the previous timestep
    x += v_x * timescale
    y += v_y * timescale
    
    #Calculate the velocity and angle computed in the previous timestep
    v = np.sqrt(v_x**2 + v_y**2)
    theta = np.arctan(v_y/v_x)
    v_star = v * v_0i
    
    #Find the drag force
    f_d = p_1 * v_star**2
   
    #Find the force due to gravity
    f_g = p_2
    
    #Find the force in the x and y directions
    f_x = -1 * f_d * np.cos(theta)
    f_y = -1 * (f_g + (f_d * np.sin(theta)))
    
    #Accelerate the ball using the forces we just calculated
    v_x += f_x * m_i * timescale
    v_y += f_y * m_i * timescale
    
    #Advance the time one timescale
    time += timescale
    
    #Determine the maximum height and output stats of the trajectory
    if y >= y_max:
        y_max = y
    elif y <= 0:
        print("The ball impacts the ground after {} seconds at a distance\
 of {} meters and at a speed of {} m/s.".format(time,x,v))
        print("The maximum height was {} meters.".format(y_max))
        print("The coefficient of drag is {}.".format(c_d))
        break
else:
    print("No impact detected in {} seconds".format(runtime))

#Plot out the result    
plt.plot(a,b)
plt.show()
