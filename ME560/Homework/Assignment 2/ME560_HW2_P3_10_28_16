#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 28 12:41:15 2016

@author: Andrew Alferman
"""

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['contour.negative_linestyle'] = 'solid'


def initconditions():
    # Configuration options for plotting:
    strmlinon = 1
    velpoton = 1
    wallon = 1
    gridlines = 1
    labelson = 1

    # Define all of the initial conditions:
    d = 0.2
    p_inf = 101.0

    # Define some more conditions that will be played with later:
    meshpoints = 50
    functionlines = 10
    return strmlinon, velpoton, wallon, gridlines, labelson, d, p_inf,\
        meshpoints, functionlines


def plotfunctions(u, mu_v):
    strmlinon, velpoton, wallon, gridlines, labelson, d, p_inf,\
        meshpoints, functionlines = initconditions()

    # Set up a mesh for plotting contour lines:
    xlist = np.linspace(-0.6, 0.6, meshpoints)
    ylist = np.linspace(-0.6, 0.6, meshpoints)
    X, Y = np.meshgrid(xlist, ylist)

    # Generate all the data:
    theta = np.arctan2(Y, X)
    r = np.sqrt(X**2.0 + Y**2.0)
    if strmlinon == 1:
        psi = u*r*np.sin(theta) * (1.0 - ((d / 2) / r)**2.0) - mu_v*np.log(r)
        streamlines = plt.contour(X, Y, psi, functionlines, colors='blue')
    if velpoton == 1:
        phi = -1*u*r*np.cos(theta) * (1 + ((d / 2) / r)**2.0) - mu_v*theta
        target = int(meshpoints / 2)
        for i in range(target):
            phi[target, i] = np.nan
        vel_potential = plt.contour(X, Y, phi, functionlines, colors='red')
    if wallon == 1:
        surface = plt.Circle((0, 0), d/2, color='black', fill=False)
        ax = plt.gca()
        ax.add_artist(surface)

    # Plot the results, with a few nifty options:
    if labelson == 1:
        plt.clabel(streamlines, inline=True, fontsize=9)
        plt.clabel(vel_potential, inline=True, fontsize=9)
    if gridlines == 1:
        plt.grid(b=True, which='both', color='black', linestyle='-')
    if strmlinon == 1 and velpoton == 1:
        plt.title("Streamfunction and Velocity Potential Plot, U = {} m/s"
                  .format(u), fontsize=14)
    elif strmlinon == 1 and velpoton != 1:
        plt.title("Streamfunction Plot, U = {}".format(u), fontsize=14)
    else:
        plt.title("Velocity Potential Plot", fontsize=14)
    plt.xlabel("X Distance (meters)", fontsize=12)
    plt.ylabel("Y Distance (meters)", fontsize=12)
    plt.xlim(-0.6, 0.6)
    plt.ylim(-0.6, 0.6)
    plt.show()
    return mu_v


def plotpress(u, meshpoints, gridlines):
    # Set up variables and lists that will be used to store the data:
    theta = 0.0
    pressvals45, pressvals90, thetas = [], [], []
    i = 0
    lift45 = 0.0
    lift90 = 0.0
    mesharea = 0.2 * np.pi / meshpoints

    # Use calculated values of mu_v for 45 and 90 degrees:
    mu_v45 = 0.2 * u * np.sin(np.pi * 0.25)
    mu_v90 = 0.2 * u

    # Add up the pressure over the whole cylinder for 45 and 90 deg cases:
    for i in range(meshpoints):
        pressvals45.append((101000.0 + (0.6 - 2.4*(np.sin(theta)**2))*(u**2) -
                           (mu_v45**2)*(60 + 24*u*np.sin(theta)/mu_v45))*0.001)
        pressvals90.append((101000.0 + (0.6 - 2.4*(np.sin(theta)**2))*(u**2) -
                           (mu_v90**2)*(60 + 24*u*np.sin(theta)/mu_v90))*0.001)
        thetas.append(theta)
        lift45 -= mesharea * pressvals45[i] * 1000.0 * np.sin(theta)
        lift90 -= mesharea * pressvals90[i] * 1000.0 * np.sin(theta)
        theta += (np.pi * 2) / meshpoints

    # Print out results of the numerically found and calculated lift:
    calclift90 = 0.4 * np.pi * 1.2 * u**2
    reallift45 = 0.24 * u**2
    reallift90 = 2 * reallift45
    drag45 = 0.108 * u**2
    drag90 = 0.06 * u**2
    print('All of the following results are per 1m length.')
    print('Numerically Determined Lift (Stgn. Pt. @ 45 deg) = {:.2f} N'
          .format(lift45))
    print('Numerically Determined Lift (Stgn. Pt. @ 90 deg) = {:.2f} N'
          .format(lift90))
    print('Calculated lift at 45 Degrees = {:.2f} N'
          .format(calclift90 * np.sqrt(2) / 2))
    print('Calculated lift at 90 Degrees = {:.2f} N'.format(calclift90))
    print('Real Lift for 45 deg Stgn. Pt = {:.2f} N'.format(reallift45))
    print('Real Lift for 90 deg Stgn. Pt = {:.2f} N'.format(reallift90))
    print('Drag for 45 deg Stgn. Pt. = {:.2f} N'.format(drag45))
    print('Drag for 90 deg Stgn. Pt. = {:.2f} N'.format(drag90))

    # Plot the results of the pressure distribution:
    plt.title('Pressure Distribution at U = {} m/s'.format(u), fontsize=14)
    plt.plot(thetas, pressvals45, label='Stgn. Pt. at 45 Degrees')
    plt.plot(thetas, pressvals90, label='Stgn. Pt. at 90 Degrees')
    plt.xlabel('Angle CCW from Positive X Axis (Radians)', fontsize=12)
    plt.ylabel('Absolute Pressure (kPa)', fontsize=12)
    plt.xticks([0, np.pi/4, np.pi/2, 3*np.pi/4, np.pi, 5*np.pi/4, 3*np.pi/2,
                7*np.pi/4, 2*np.pi],
               ['$0$', r'$\frac{\pi}{4}$', r'$\frac{\pi}{2}$',
                r'$\frac{3\pi}{4}$', r'$\pi$', r'$\frac{5\pi}{4}$',
                r'$\frac{3\pi}{2}$', r'$\frac{7\pi}{4}$', r'$2\pi$'],
               fontsize=12)
    plt.ylim(98.9, 101.2)
    plt.xlim(0, 2*np.pi)
    if gridlines == 1:
        plt.grid(b=True, which='both', color='black', linestyle='-')
    plt.legend(bbox_to_anchor=(1, 1), loc=2)
    plt.show()
    print()
    print('--------------------------')
    return reallift45, reallift90, drag45, drag90

# All the hard work was done in the functions above, the program below just
# runs it for a range of 4 through 15 m/s and plots out the value of mu_v
# for each velocity.
# Set up a few lists for storing data:
rotvel, ulist, ratio45, ratio90 = [], [], [], []

# Loop the above functions over the range of velocity values
print()
print('Plot for Step 2.:')
plotfunctions(10, -1.2)
print('------------------------------')
print()
print('Plots for Steps 3. through 7.:')
for u in range(4, 16):
    rotvel.append(plotfunctions(u, -0.2 * u))
    ulist.append(u)
    real45, real90, drag45, drag90 = plotpress(u, 50, 1)
    ratio45.append(real45 / drag45)
    ratio90.append(real90 / drag90)

# Plot the results:
plt.plot(ulist, rotvel)
plt.title("Vortex Strength vs. Flow Velocity", fontsize=14)
plt.xlabel('Uniform Flow Velocity (m/s)', fontsize=12)
plt.ylabel('Vortex Strength (' + r'$\mu_v$' + ') Value', fontsize=12)
plt.show()
plt.plot(ulist, ratio45, label='45 deg Stgn. Pt.')
plt.plot(ulist, ratio90, label='90 deg Stgn. Pt.')
plt.title('Lift to Drag Ratio', fontsize=14)
plt.xlabel('Uniform Flow Velocity (m/s)', fontsize=12)
plt.ylabel('Ratio')
plt.ylim(0, 10)
plt.xlim(4, 15)
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.show()
