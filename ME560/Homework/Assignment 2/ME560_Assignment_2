#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 12 18:06:40 2016

@author: andrewalferman
"""
# Import modules
import numpy as np
import matplotlib as plt

# Define global parameters for the problem
d, p_inf = 0.2, 101

# Define list of values of U
u = list(range(4, 16))

# Define the number of points (pts) around the cylinder that will be evaluated
pts = 1000


# Define a function that creates a streamfunction (strmfn) for a cylinder
def strmfn():
    pass


# Define a function that creates a velocity potential (velp) for a cylinder
def velp():
    pass


# Define a function that finds the stagnation points? Don't know if this works
def stagp():
    pass


# Define a function that computes the pressure at all points on the cylinder
def compress(pts, d):
    global pvals
    pvals = []
    xloc = []
    yloc = []
    dtheta = 2.0 * np.pi() / pts
    for i in pts:
        xloc.append((d * 0.5) * np.cos(i * dtheta))
        yloc.append((d * 0.5) * np.sin(i * dtheta))
    # ***Lots of maths stuff goes here***
    return [pvals, xloc, yloc]


# Define a function that finds the pressure at any given point of getpress()
# ***Note that theta is in degrees***
def getpress(theta):
    pos = int(theta * len(pvals) / 360)
    return pvals[pos]


# Define a function that finds the lift across the cylinder.
def getlift(d):
    nodea = (np.pi() * d / len(pvals))
    f_x = 0.0
    f_y = 0.0
    thetal = 0.0
    for i in len(pvals):
        f = pvals[i] * nodea
        f_x += -1 * f * np.cos(thetal)
        f_y += -1 * f * np.sin(thetal)
        thetal += 2.0 * np.pi() / len(pvals)

# Run all of the functions that are needed for now
# *** Be sure to add all of the arguments to this function***
prm.append(compress(pts, d))
