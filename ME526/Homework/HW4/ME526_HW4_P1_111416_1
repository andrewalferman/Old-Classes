#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Nov 13 21:45:56 2016

@author: andrewalferman
"""

import numpy as np
import matplotlib.pyplot as plt


def leapfrog(Ym1, Y, A, dt):
    return Ym1 + 2*dt*np.dot(A, Y)


def fwdeuler(Y, A, dt):
    return np.dot((np.eye(2) + dt*A), Y)


def exactsoln(omega, t):
    return np.cos(omega * t) + 0.25*np.sin(omega * t)

# Set up all of the initial conditions and problem parameters
omega = 4.0
dtm = [0.15, 0.05, 0.015, 0.005, 0.0015]
y0 = 1.0
y0p = 0.0
Y0 = [[y0], [y0p]]
Y0 = np.array(Y0)

checkm = [4.5]

# Set up the Jacobian matrix for this particular problem
A = [[0.0, 1.0], [-1.0 * omega**2, 0.0]]
A = np.array(A)
errorl, dtmm = [], []

for j in checkm:
    for i in dtm:
        dtmm.append(i)
        t = 0.0
        # Set up lists to log all of the values for plotting later
        Yll, tl = [1], []
        # Run a forward Euler approximation for the first timestep only
        Yl, Ylm1, Yold = Y0, Y0, Y0
        Yl = fwdeuler(Yl, A, i)
        t += i
        while t <= 6:
            Yll.append(Yl[0])
            tl.append(t)
            Ylnew = leapfrog(Ylm1, Yl, A, i)
            Ylm1 = Yl
            Yl = Ylnew
            if t < j + 0.0014 and t > j - 0.0014:
                errorl.append(np.abs(Yl[0] - exactsoln(omega, t)))
            t += i

plt.loglog(dtmm, errorl, label='Leapfrog Error')
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.xlabel('Timestep Size')
plt.ylabel('Absolute Error')
plt.title('Error Plot (Taken at t = {})'.format(j))
plt.show()
