#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 11 02:49:26 2016

@author: andrewalferman
"""

#Importing Commands
import numpy as np
import matplotlib.pyplot as plt

#Create an array of all of the desired datapoints
xv=np.linspace(0,8,33)

#Create an array of all of the exact solutions to the function
def solutions(xv):
    exs=[]
    for i in xv:
        exs.append(np.sin((4-i)*(4+i)))
    return exs
    
#Create an array with all of the estimated values of f''
def estdvalues(xv):
    estd=[]
    exs=solutions(xv)
    for i in range(len(xv)):
        if i==0:
            estd.append((exs[i]-2*exs[i+1]+exs[i+2])/((8/len(xv))**2))
        elif i==(len(xv)-1):
            estd.append((exs[i]-2*exs[i-1]+exs[i-2])/((8/len(xv))**2))
        else:
            estd.append((1.5*exs[i+1]-3*exs[i]+1.5*exs[i-1])/((8/len(xv))**2))
    return estd

#Create an array of the actual f'' values
def actvalues(xv):
    actfd=[]
    for i in range(len(xv)):
        actfd.append(-4*xv[i]**2*np.sin((4-xv[i])*(4+xv[i]))-2*np.cos((4-xv[i])*(4+xv[i])))
    return actfd
    
#Create an array of the absolute error
def abserror(xv):
    actfd=actvalues(xv)
    estd=estdvalues(xv)
    erra=[]
    for i in range(len(xv)):
        erra.append(np.absolute(actfd[i]-estd[i]))
    return erra

#Cycle through error of different grid spacings    
xh=[10.0**-3,5*10.0**-3,10.0**-2,5*10.0**-2,10.0**-1,0.25]
def gerror(xh):
    fours=[]
    for i in xh:
        nerra=[]
        xvn=np.linspace(0,8,(8/i)+1)
        nerra=abserror(xvn)
        for j in range(len(xvn)):
            if xvn[j]==4.0:
                fours.append(nerra[j])
                print(nerra[j])
        plt.title("Graph of spacing {}:".format(i))
        plt.xlabel("X value")
        plt.ylabel("Absolute Error")
        plt.plot(xvn,nerra)
        plt.show()
    return fours
    
#Plot the actual vs. estimated values of f''
print("Note: Blue is actual values, green is estimated values")
plt.plot(xv,actvalues(xv))
plt.plot(xv,estdvalues(xv))
plt.xlabel("X value")
plt.ylabel("Second Derivative Value")
plt.title("Second Derivative Values")
plt.show()

#Plot the absolute error
plt.plot(xv,abserror(xv))
plt.xlabel("X value")
plt.ylabel("Absolute Error Value")
plt.title("Absolute Error")
plt.show()

#Plot the error on a log-log plot
fours=gerror(xh)
plt.loglog(xh,fours)
plt.xlabel("Grid Spacing")
plt.ylabel("Absolute Error")
plt.title("Absolute Error at x = 4.0")
plt.show()