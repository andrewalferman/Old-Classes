#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 19 14:27:09 2016

Authors: Andrew Alferman and Dan Magee

This code creates all of the required plots for problem 1 of ME526 HW#2 Fall 16
"""

# Import some of the libraries needed in order to solve all of the expressions
# of the modified wavefunctions, and to plot out the results.
import numpy as np
import matplotlib.pyplot as plt


# Creating five functions, one for each of the five approximations of the first
# derivative.  Each of the functions takes the value of k and delta_x, and
# returns the value of i * k_star * delta_x, abbreviated as iksdx.
# Note that j ---> i (sqrt(-1)) in Python.
def fn_one(k, delx):
    iksdx = 1 - np.cos(k * delx) + 1j*np.sin(k * delx)
    return iksdx


def fn_two(k, delx):
    iksdx = 1j * np.sin(k * delx)
    return iksdx


def fn_three(k, delx):
    iksdx = 1.5 - 2*np.cos(k * delx) + 2j*np.sin(k * delx) + \
            0.5*np.cos(2 * k * delx) - 0.5j*np.sin(2 * k * delx)
    return iksdx


def fn_four(k, delx):
    iksdx = (np.cos(3 * k * delx) - 1j*np.sin(3 * k * delx) -
             6*np.cos(2 * k * delx) + 6j*np.sin(2 * k * delx) +
             3*np.cos(k * delx) - 3j*np.sin(k * delx) + 2) * 0.1666666666666666
    return iksdx


def fn_five(k, delx):
    iksdx = (-1j*np.sin(2 * k * delx) + 8j*np.sin(k * delx)) * 0.16666666666666
    return iksdx


# Create a function that finds the actual value of k * delta_x
def fn_act(k, delx):
    kdx = k * delx
    return kdx


# Create a function that determines the error of a given input
def error(fn_value, delx):
    act = fn_act(1.0, delx)
    err = 100 * (np.absolute(fn_value - act)) / act
    return err

# Set the number of grid points
n_grid = 100
n_grid_i = 1 / n_grid

# Define all of the values given to us in the problem
length = 2 * np.pi
delx = length / n_grid

# Create lists that will capture all of the information that will be plotted
kv, onei, twoi, threei, fouri, fivei, oner, twor, threer, fourr, fiver, act,\
    actr = [], [], [], [], [], [], [], [], [], [], [], [], []

# Create all of the data points in a for loop
for i in range(0, int(n_grid / 2 + 1)):
    n = 2 * np.pi * i * n_grid_i
    kv.append(n)
    onei.append(fn_one(i, delx).imag)
    twoi.append(fn_two(i, delx).imag)
    threei.append(fn_three(i, delx).imag)
    fouri.append(fn_four(i, delx).imag)
    fivei.append(fn_five(i, delx).imag)
    oner.append(np.exp(-1 * fn_one(i, delx)).real)
    twor.append(np.exp(-1 * fn_two(i, delx)).real)
    threer.append(np.exp(-1 * fn_three(i, delx)).real)
    fourr.append(np.exp(-1 * fn_four(i, delx)).real)
    fiver.append(np.exp(-1 * fn_five(i, delx)).real)
    act.append(fn_act(i, delx))
    actr.append(np.exp(-1 * fn_act(i, delx)))

# Print out all of the plots of the imaginary values of each function vs. act.
# Note that if only the imaginary parts are looked at, functions 1 and 2
# are identical.
plt.plot(kv, onei, label="1")
plt.plot(kv, twoi, label="2")
plt.plot(kv, threei, label="3")
plt.plot(kv, fouri, label="4")
plt.plot(kv, fivei, label="5")
plt.plot(kv, act, label="Actual")
plt.xticks([0, np.pi/4, np.pi/2, 3*np.pi/4, np.pi],
           ['$0$', r'$\frac{\pi}{4}$', r'$\frac{\pi}{2}$', r'$\frac{3\pi}{4}$',
            r'$\pi$'])
plt.ylabel("Function Value (Multiples of i)")
plt.xlabel("x Value")
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.title("Figure 1: Plot of Imaginary Parts vs. Actual")
plt.show()
print("Note: Functions 1 and 2 occupy the same line in this figure because\
      they have the same imaginary parts.")

# Print out all of the plots of the real values of each function vs. act.
# Note that functions 2 and 5 have no real parts and therefor occupy the same
# horizontal line
plt.plot(kv, oner, label="1")
plt.plot(kv, twor, label="2")
plt.plot(kv, threer, label="3")
plt.plot(kv, fourr, label="4")
plt.plot(kv, fiver, label="5")
plt.plot(kv, actr, label="Actual")
plt.xticks([0, np.pi/4, np.pi/2, 3*np.pi/4, np.pi],
           ['$0$', r'$\frac{\pi}{4}$', r'$\frac{\pi}{2}$', r'$\frac{3\pi}{4}$',
            r'$\pi$'])
plt.ylabel("Function Value")
plt.xlabel("x Value")
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.title("Figure 2: Plot of Real Parts vs. Actual")
plt.show()
print("Note: Functions 2 and 5 occupy the same horizontal line because they\
      have no real parts.")

# Initialize data capturing lists and k value for part d
sone, stwo, sthree, sfour, sfive, dm = [], [], [], [], [], []
k = 1.0

# Iterate the error check function for a grid spacing range of 2 to 100.
# Note that only the imaginary part of each function was evaluated for this
# problem.  Consequentially, functions 1 and 2 occupy the same line because
# the imaginary parts are identical.
for d in range(2, 101):
    dlx = length / d
    dm.append(d)
    sone.append(error(fn_one(k, dlx).imag, dlx))
    stwo.append(error(fn_two(k, dlx).imag, dlx))
    sthree.append(error(fn_three(k, dlx).imag, dlx))
    sfour.append(error(fn_four(k, dlx).imag, dlx))
    sfive.append(error(fn_five(k, dlx).imag, dlx))

# Plot all of the error functions.
plt.loglog(dm, sone, label="1")
plt.loglog(dm, stwo, label="2")
plt.loglog(dm, sthree, label="3")
plt.loglog(dm, sfour, label="4")
plt.loglog(dm, sfive, label="5")
plt.ylabel("Absolute Error")
plt.xlabel("Number of Grid Points N")
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.title("Figure 3: Error vs. N")
plt.show()
print("Note: Functions 1 and 2 occupy the same line because the imaginary\
      parts are identical.  As seen in this plot, functions 1 through 4 all \
      have second order accuracy based on the slopes.  Function 5 has 4th\
      order accuracy.")
