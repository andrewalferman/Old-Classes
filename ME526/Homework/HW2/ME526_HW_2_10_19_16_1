#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 19 14:27:09 2016

Authors: Andrew Alferman and Dan Magee
"""

# Import some of the libraries needed in order to solve all of the expressions
# of the modified wavefunctions, and to plot out the results.
import numpy as np
import matplotlib as plt


# Creating five functions, one for each of the five approximations of the first
# derivative.  Each of the functions takes the value of k and delta_x, and
# returns the value of i * k_star * delta_x, abbreviated as iksdx.
# Note that j = i in Python.
def fn_one(k, delx):
    iksdx = 1j * np.sin(k * delx)
    return iksdx


def fn_two(k, delx):
    iksdx = 1j * np.sin(k * delx)
    return iksdx


def fn_three(k, delx):
    iksdx = 1.5 - 2*np.cos(k * delx) - 2j*np.sin(k * delx) + \
            0.5*np.cos(2 * k * delx) - 0.5j*np.sin(2 * k * delx)
    return iksdx


def fn_four(k, delx):
    iksdx = (np.cos(3 * k * delx) - 1j*np.sin(3 * k * delx) -
             6*np.cos(2 * k * delx) + 6j*np.sin(2 * k * delx) +
             3*np.cos(k * delx) - 3j*np.sin(k * delx) + 2) * 0.1666666666666666
    return iksdx


def fn_five(k, delx):
    iksdx = (-1j*np.sin(2 * k * delx) + 8j*np.sin(k * delx)) * 0.16666666666666
    return iksdx


# Create a function that finds the actual value of k * delta_x
def fn_act(k, delx):
    kdx