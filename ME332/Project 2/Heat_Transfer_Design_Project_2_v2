#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This code finds all of the solutions required for ME332 Design Project 2 Fall
2016.

Overall assumptions:
    1. Negligible heat loss to the surroundings.  Factoring in these losses
        will not result in any loss of points, however the losses are much less
        than the overall heat transfer rate of the heat exchanger and therefore
        full credit may be given if the losses are not taken into account.
    2. Negligible kinetic and potential energy changes.
    3. Constant properties.
    4. Fully developed, steady state conditions.

For sake of ease, all units will be in degrees C, kg, m, seconds, and Joules
"""

import numpy as np
import matplotlib.pyplot as plt

laminarmethod = 2

# Set up all of the given information and constants

# Temperatures in degrees C
Ts_i = 100
Ts_f = 30
Tc_i = 0

# Volumetric flow rate of solution in m^3/sec
V_s = 5 / (1000 * 60)

# Density of metak in kg/m^3
rho_alloy625 = 8440

# Operational time in seconds for the values to be optimized to
optime = 50 * 60 * 60

# Maximum allowable pressure drop in Pascals
maxdpdx = 500000

# Conductivity of Alloy 625
k625 = 9.8

# -----------------------------------------------------------------
# Assumptions about the fluid properties, found in the back of the book.
# Use properties at 300K.
cpwater = 4185
cpair = 1005
kwater = 654.3/1000
kair = 25.7/1000
Prandtl_air = 0.707
mu_air = 184.6e-7
mu_w = 855.e-6
rho_air = 1.1614
rho_w = 983.2
pr_water = 2.99

# -----------------------------------------------------------------
# Derived values
# Overall temperature drop of solution across heat exchanger
dT_overall = Ts_i - Ts_f

# Mass flow rate of solution in kg/sec
mdot = V_s * rho_w

# Overall heat transfer rate from solution
q_overall = mdot * cpwater * dT_overall

# -----------------------------------------------------------------
# Functions that will be used to determine all values
# Finds the total cost of the heat exchanger with operational costs considered
def totalcost(r, l, mdotcoolant, optime):
    # The number that is multiplied by the radius combines the cost per kg of
    # the metal along with the geometry of the heat exchanger, etc.
    return 7084487.783 * (r**2) * l + optime * 0.01 *mdotcoolant


# Finds the log mean temperature difference given the delta T's
def dtlm(dT1, dT2):
    return ((dT2 - dT1) / np.log(dT2/dT1))


# Finds the coolant outlet temperature for a given mass flow rate
def Tco(coolantparams, mdotcoolant):
    q_overall, cpair, Tc_i =  coolantparams
    return Tc_i + q_overall / (mdotcoolant * cpair)


# Finds the value of h using the nusselt number and parameters of the problem
def hfactor(Nusselt, conductivity, diameter):
    return Nusselt * conductivity / diameter


# Returns the value of the Nusselt number for a turbulent, fully developed flow
# in a circular tube
def turbNusselt(Reynolds, Prandtl, heating):
    if heating == True:
        return 0.023 * (Reynolds**0.8) * (Prandtl**0.4)
    else:
        return 0.023 * (Reynolds**0.8) * (Prandtl**0.3)


# Returns the value of the Nusselt number for a laminar, fully developed flow
# in a circular tube with constant heat flux
def lamNusselt():
    return 4.36


def lamNusselt2(ffactor, reynolds, pr):
    return (ffactor * 0.125) * (reynolds - 1000.) * pr /\
        (1. + 12.7 * (ffactor * 0.125)**0.5 * (pr**(2/3) - 1.))


# Finds the length using the overall heat transfer coefficient equation
def findlength(hiterm, hoterm, condterm, qoverall, dtlm):
    rightside = hiterm + hoterm + condterm
    leftside = dtlm / qoverall
    return rightside / leftside


# Finds the losses due to thermal conductivity, per 1m length
def conductiveterm(kmetal):
    # Note that all the geometry of Do/Di is already factored in here
    return np.log(25/16) / (2 * np.pi * kmetal * 1)


def findspeed(ffactor, r, rho, maxdpdx):
    return np.sqrt(maxdpdx * 1.625 * r / (ffactor * rho))


def findmdotcoolant(velocity, rho, csarea):
    return velocity * rho * csarea


def coolantperhourcost(mdot):
    return mdot * 0.01 * 60 * 60


def metalcost(r, l):
    return 7084487.783 * (r**2) * l

# -----------------------------------------------------------------
# Set up some values needed for the log mean temperature difference
paralleldT1 = Ts_i - Tc_i
counterflowdT2 = Ts_f - Tc_i

# Parameters to feed the function that calculates the coolant outlet temp
coolantparams = q_overall, cpair, Tc_i

# Wild guesses for a Reynolds number, length, radius, and friction factor, etc.
# Note that these can be easily adjusted in the end to improve accuracy
reynoldsguess = 4.e5
ffactor = 0.03

# These variables will be used to find the minimum cost later
parallelmin = 9.e99
countermin = 9.e99

# Create a couple lists to store all of the required information
costlistcounter, costlistparallel, rlist = [], [], []
mdots = []
outlettemps = []
counterlengths  = []
paralengths  = []
coolvels = []
reynoldss = []
coolcosts = []
countermetalcosts = []
parametalcosts = []
parauas = []
counteruas = []
"""
-------------------------------------------------------------------------------
Use a for loop to iterate through a range of inner tube radii to find the
optimal radius for cost.  This radius will be a low point in the graph.  Note
that for very small radii, the mass flow rate must be very low in order to meet
the pressure drop requirements, and consequentially the heat exchanger may not
work at all.  In order to work, the mass flow rate must be at least ~0.25 kg/s.
"""
for r in np.arange(0.005, 0.051, 0.005):
    # Create a list of all of the radii evaluated
    rlist.append(r)

    # Find the speed of the coolant based on the friction factor equation.
    # This value must be maximized to decrease the length.
    coolvel = findspeed(ffactor, r, rho_air, maxdpdx)

    # Find the cross sectional area of the annulus
    Acso = np.pi * ((2*r)**2 - (1.25*r)**2)

    # Find the cross sectional area of the inner tube
    Acsi = np.pi * r**2

    # Find the velocity of the solution
    vsol = V_s / Acsi
    resol = rho_w * vsol * 2*r / mu_w
    print(resol)

    # Find the heat transfer area per 1m length
    Ai = 2 * np.pi * r * 1
    Ao = 2 * np.pi * 1.25 * r * 1

    # Find the mass flow rate of the coolant
    mdotcoolant = findmdotcoolant(coolvel, rho_air, Acso)

    # Coolant outlet temperature depends on Mdot only
    Tc_f = Tco(coolantparams, mdotcoolant)

    # Find the log mean temperature difference for both CF and Parallel
    paralleldT2 = Ts_f - Tc_f
    counterflowdT1 = Ts_i - Tc_f
    paralleldtlm = dtlm(paralleldT1, paralleldT2)
    counterflowdtlm = dtlm(counterflowdT1, counterflowdT2)

    # Find the h factors for a guessed radius (r will cancel out later)
    if laminarmethod == 1:
        hinner = hfactor(lamNusselt(), kwater, 2*r)
    else:
        hinner = hfactor(lamNusselt2(ffactor, resol, pr_water), kwater, 2*r)
    houter = hfactor(turbNusselt(reynoldsguess, Prandtl_air, True), kair,
                     2*(1.25*r))

    # Find all the terms used in the overall heat tranfer coefficient eqn.
    hiterm = 1 / (hinner*Ai)
    hoterm = 1 / (houter*Ao)
    condterm = conductiveterm(k625)

    # Find the length of the heat exchanger
    lcounter = findlength(hiterm, hoterm, condterm, q_overall,
                               counterflowdtlm)
    lpara = findlength(hiterm, hoterm, condterm, q_overall,
                                paralleldtlm)

    # Using all of the information calculated, find the optimal cost and output
    # all required values
    counterflowcost = totalcost(r, lcounter, mdotcoolant, optime)
    parallelflowcost = totalcost(r, lpara, mdotcoolant, optime)
    costlistcounter.append(counterflowcost)
    costlistparallel.append(parallelflowcost)
    mdots.append(mdotcoolant * 3600)
    outlettemps.append(Tc_f)
    counterlengths.append(lcounter)
    paralengths.append(lpara)
    coolvels.append(coolvel)
    coolcosts.append(coolantperhourcost(mdotcoolant))
    countermetalcosts.append(metalcost(r, lcounter))
    parametalcosts.append(metalcost(r, lpara))
    counteruas.append(q_overall / counterflowdtlm)
    parauas.append(q_overall / paralleldtlm)
    if counterflowcost < countermin:
        countermin = counterflowcost
        mdotoptimalcounterflow = mdotcoolant
        loptimalcounterflow = lcounter
        roptimalcounterflow = r
        Tcooptimalcounter = Tc_f
        Reynoldsoptimalcounter = reynoldsguess
    if parallelflowcost < parallelmin:
        parallelmin = parallelflowcost
        mdotoptimalparallel = mdotcoolant
        loptimalparallel = lpara
        roptimalparallel = r
        Tcooptimalparallel = Tc_f
        Reynoldsoptimalparallel = reynoldsguess

    # Use some of the calculated values in the previous iteration to obtain
    # better guesses for some of the values, as needed.
    reynoldsguess = rho_air * coolvel * 1.625 * 2* r / mu_air
    reynoldss.append(reynoldsguess)

# Plot out the results of mdot coolant vs. cost
plt.figure(1)
plt.title('Counterflow HX Inner Radius vs. Cost')
plt.plot(rlist, costlistcounter)
plt.xlabel('Inner Tube Inner Radius (m)')
plt.ylabel('Price in USD')

plt.figure(2)
plt.title('Parallel HX Inner Radius vs. Cost')
plt.plot(rlist, costlistparallel)
plt.xlabel('Inner Tube Inner Radius (m)')
plt.ylabel('Price in USD')
plt.show()

# Output all the results in an easy to read format
rlist = ['%.3f' % elem for elem in rlist]
mdots = ['%.2f' % elem for elem in mdots]
outlettemps = ['%.2f' % elem for elem in outlettemps]
counterlengths = ['%.2f' % elem for elem in counterlengths]
paralengths = ['%.2f' % elem for elem in paralengths]
coolvels = ['%.2f' % elem for elem in coolvels]
reynoldss = ['%.2f' % elem for elem in reynoldss]
countermetalcosts = ['%.2f' % elem for elem in countermetalcosts]
coolcosts = ['%.2f' % elem for elem in coolcosts]
parametalcosts = ['%.2f' % elem for elem in parametalcosts]
counteruas = ['%.2f' % elem for elem in counteruas]
parauas = ['%.2f' % elem for elem in parauas]
print('Optimal Counterflow Values -')
print('Minimum Cost = ${:.2f}'.format(countermin))
print('Optimal Mdot = {:.2f} kg/s'.format(mdotoptimalcounterflow))
print('Optimal Coolant Outlet Temp = {:.2f} deg C'.format(Tcooptimalcounter))
print('Optimal Length = {:.2f} m'.format(loptimalcounterflow))
print('Optimal Inner Radius = {:.4f} m'.format(roptimalcounterflow))
print('Coolant Reynolds Number = {:.2f}'.format(Reynoldsoptimalcounter))
print('---------')
print('Optimal Parallel Flow Values -')
print('Minimum Cost = ${:.2f}'.format(parallelmin))
print('Optimal Mdot = {:.2f} kg/s'.format(mdotoptimalparallel))
print('Optimal Coolant Outlet Temp = {:.2f} deg C'.format(Tcooptimalparallel))
print('Optimal Length = {:.2f} m'.format(loptimalparallel))
print('Optimal Inner Radius = {:.4f} m'.format(roptimalparallel))
print('Coolant Reynolds Number = {:.2f}'.format(Reynoldsoptimalparallel))
print('---------')
print('Radii:')
print(rlist)
print('---------')
print('Coolant mass flow rates:')
print(mdots)
print('---------')
print('Coolant outlet temps:')
print(outlettemps)
print('---------')
print('Counterflow Lengths')
print(counterlengths)
print('---------')
print('Parallel Lengths')
print(paralengths)
print('---------')
print('Coolant Velocities')
print(coolvels)
print('---------')
print('Coolant Re')
print(reynoldss)
print('---------')
print('Coolant Costs')
print(coolcosts)
print('---------')
print('Counterflow Metal Costs')
print(countermetalcosts)
print('---------')
print('Parallel Metal Costs')
print(parametalcosts)
print('---------')
print('Parallel UA')
print(parauas)
print('---------')
print('Counterflow UA')
print(counteruas)
